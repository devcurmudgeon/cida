#!/usr/bin/python
# Copyright (C) 2012-2015  Codethink Limited
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.


'''A Morph deployment write extension for raw disk images.'''


import cliapp
import os
import sys
import time
import tempfile

import morphlib.writeexts


class RawDiskWriteExtension(morphlib.writeexts.WriteExtension):

    '''See rawdisk.write.help for documentation'''

    def process_args(self, args):
        if len(args) != 2:
            raise cliapp.AppException('Wrong number of command line args')

        temp_root, location = args
        upgrade = self.get_environment_boolean('UPGRADE')

        if upgrade:
            self.upgrade_local_system(location, temp_root)
        else:
            try:
                if not self.is_device(location):
                    with self.created_disk_image(location):
                        self.format_btrfs(location)
                        self.create_system(temp_root, location)
                    self.status(msg='Disk image has been created at %s' %
                                     location)
                else:
                    self.format_btrfs(location)
                    self.create_system(temp_root, location)
                    self.status(msg='System deployed to %s' % location)
            except Exception:
                self.status(msg='Failure to deploy system to %s' %
                                 location)
                raise

    def upgrade_local_system(self, raw_disk, temp_root):
        self.complete_fstab_for_btrfs_layout(temp_root)

        with self.mount(raw_disk) as mp:
            version_label = self.get_version_label(mp)
            self.status(msg='Updating image to a new version with label %s' %
                        version_label)

            version_root = os.path.join(mp, 'systems', version_label)
            os.mkdir(version_root)

            old_orig = os.path.join(mp, 'systems', 'default', 'orig')
            new_orig = os.path.join(version_root, 'orig')
            cliapp.runcmd(
                ['btrfs', 'subvolume', 'snapshot', old_orig, new_orig])

            cliapp.runcmd(
                ['rsync', '-a', '--checksum', '--numeric-ids', '--delete',
                 temp_root + os.path.sep, new_orig])

            self.create_run(version_root)

            default_path = os.path.join(mp, 'systems', 'default')
            if os.path.exists(default_path):
                os.remove(default_path)
            else:
                # we are upgrading and old system that does
                # not have an updated extlinux config file
                if self.bootloader_config_is_wanted():
                    self.generate_bootloader_config(mp)
                self.install_bootloader(mp)
            os.symlink(version_label, default_path)

            if self.bootloader_config_is_wanted():
                self.install_kernel(version_root, temp_root)

    def get_version_label(self, mp):
        version_label = os.environ.get('VERSION_LABEL')

        if version_label is None:
            raise cliapp.AppException('VERSION_LABEL was not given')

        if os.path.exists(os.path.join(mp, 'systems', version_label)):
            raise cliapp.AppException('VERSION_LABEL %s already exists'
                                      % version_label)

        return version_label


RawDiskWriteExtension().run()
