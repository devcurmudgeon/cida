#!/bin/sh

# Copyright (C) 2014-2015  Codethink Limited
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

ROOT="$1"

enable(){
    ln -sf "/usr/lib/systemd/system/$1.service" \
            "$ROOT/etc/systemd/system/multi-user.target.wants/$1.service"
}

unnaceptable(){
    eval echo Unexpected value \$$1 for $1 >&2
    exit 1
}

check_bool(){
    case "$(eval echo \"\$$1\")" in
    True|'')
        eval "$1=true"
        ;;
    False)
        eval "$1=false"
        ;;
    *)
        unnaceptable "$1"
        ;;
    esac
}

##########################################################################
# Check variables
##########################################################################

check_bool CINDER_ENABLE_CONTROLLER
check_bool CINDER_ENABLE_COMPUTE
check_bool CINDER_ENABLE_STORAGE

if ! "$CINDER_ENABLE_CONTROLLER" && \
   ! "$CINDER_ENABLE_COMPUTE" && \
   ! "$CINDER_ENABLE_STORAGE"; then
    exit 0
fi

if [ -z "$RABBITMQ_HOST" -o \
     -z "$RABBITMQ_PORT" -o \
     -z "$RABBITMQ_USER" -o \
     -z "$RABBITMQ_PASSWORD" -o \
     -z "$KEYSTONE_TEMPORARY_ADMIN_TOKEN" -o \
     -z "$CINDER_DB_USER" -o \
     -z "$CINDER_DB_PASSWORD" -o \
     -z "$CONTROLLER_HOST_ADDRESS" -o \
     -z "$CINDER_SERVICE_USER" -o \
     -z "$CINDER_SERVICE_PASSWORD" -o \
     -z "$CINDER_DEVICE" -o \
     -z "$MANAGEMENT_INTERFACE_IP_ADDRESS" ]; then
    echo Some options required for Cinder were defined, but not all.
    exit 1
fi

######################################
# Enable relevant openstack services #
######################################

if "$CINDER_ENABLE_COMPUTE" || "$CINDER_ENABLE_STORAGE"; then
    enable iscsi-setup
    enable target #target.service!
    enable iscsid
fi
if "$CINDER_ENABLE_COMPUTE" || "$CINDER_ENABLE_CONTROLLER" || "$CINDER_ENABLE_STORAGE"; then
    enable openstack-cinder-config-setup
fi
if "$CINDER_ENABLE_STORAGE"; then
    enable openstack-cinder-lv-setup
    enable lvm2-lvmetad
    enable openstack-cinder-volume
    enable openstack-cinder-backup
    enable openstack-cinder-scheduler
fi
if "$CINDER_ENABLE_CONTROLLER"; then
    enable openstack-cinder-db-setup
    enable openstack-cinder-api
fi

##########################################################################
# Generate configuration file
##########################################################################

OPENSTACK_DATA="$ROOT/etc/openstack"
mkdir -p "$OPENSTACK_DATA"

python <<'EOF' >"$OPENSTACK_DATA/cinder.conf"
import os, sys, yaml

cinder_configuration={
    'RABBITMQ_HOST':os.environ['RABBITMQ_HOST'],
    'RABBITMQ_PORT':os.environ['RABBITMQ_PORT'],
    'RABBITMQ_USER':os.environ['RABBITMQ_USER'],
    'RABBITMQ_PASSWORD':os.environ['RABBITMQ_PASSWORD'],
    'KEYSTONE_TEMPORARY_ADMIN_TOKEN':os.environ['KEYSTONE_TEMPORARY_ADMIN_TOKEN'],
    'CINDER_DB_USER':os.environ['CINDER_DB_USER'],
    'CINDER_DB_PASSWORD':os.environ['CINDER_DB_PASSWORD'],
    'CONTROLLER_HOST_ADDRESS':os.environ['CONTROLLER_HOST_ADDRESS'],
    'CINDER_SERVICE_USER':os.environ['CINDER_SERVICE_USER'],
    'CINDER_SERVICE_PASSWORD':os.environ['CINDER_SERVICE_PASSWORD'],
    'CINDER_DEVICE':os.environ['CINDER_DEVICE'],
    'MANAGEMENT_INTERFACE_IP_ADDRESS':os.environ['MANAGEMENT_INTERFACE_IP_ADDRESS'],
}

yaml.dump(cinder_configuration, sys.stdout, default_flow_style=False)
EOF
