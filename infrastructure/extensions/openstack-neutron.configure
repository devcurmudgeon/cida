#!/bin/sh

# Copyright (C) 2014-2015  Codethink Limited
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

ROOT="$1"

enable(){
    ln -sf "/usr/lib/systemd/system/openstack-neutron-$1.service" \
            "$ROOT/etc/systemd/system/multi-user.target.wants/openstack-neutron-$1.service"
}

unnaceptable(){
    eval echo Unexpected value \$$1 for $1 >&2
    exit 1
}

check_bool(){
    case "$(eval echo \"\$$1\")" in
    True|'')
        eval "$1=true"
        ;;
    False)
        eval "$1=false"
        ;;
    *)
        unnaceptable "$1"
        ;;
    esac
}

##########################################################################
# Check variables
##########################################################################

check_bool NEUTRON_ENABLE_CONTROLLER
check_bool NEUTRON_ENABLE_MANAGER
check_bool NEUTRON_ENABLE_AGENT

if ! "$NEUTRON_ENABLE_CONTROLLER" && \
   ! "$NEUTRON_ENABLE_MANAGER" && \
   ! "$NEUTRON_ENABLE_AGENT"; then
    exit 0
fi

if [ -z "$NEUTRON_SERVICE_USER" -o \
     -z "$NEUTRON_SERVICE_PASSWORD" -o \
     -z "$NEUTRON_DB_USER" -o \
     -z "$NEUTRON_DB_PASSWORD" -o \
     -z "$METADATA_PROXY_SHARED_SECRET" -o \
     -z "$NOVA_SERVICE_USER" -o \
     -z "$NOVA_SERVICE_PASSWORD" -o \
     -z "$RABBITMQ_HOST" -o \
     -z "$RABBITMQ_USER" -o \
     -z "$RABBITMQ_PASSWORD" -o \
     -z "$RABBITMQ_PORT" -o \
     -z "$CONTROLLER_HOST_ADDRESS" -o \
     -z "$MANAGEMENT_INTERFACE_IP_ADDRESS" -o \
     -z "$KEYSTONE_TEMPORARY_ADMIN_TOKEN" ]; then
    echo Some options required for Neutron were defined, but not all.
    exit 1
fi

#############################################
# Ensure /var/run is an appropriate symlink #
#############################################

if ! link="$(readlink "$ROOT/var/run")" || [ "$link" != ../run ]; then
    rm -rf "$ROOT/var/run"
    ln -s ../run "$ROOT/var/run"
fi

###################
# Enable services #
###################

if "$NEUTRON_ENABLE_CONTROLLER"; then
    enable config-setup
    enable db-setup
    enable server
fi

if "$NEUTRON_ENABLE_MANAGER"; then
    enable config-setup
    enable ovs-cleanup
    enable dhcp-agent
    enable l3-agent
    enable plugin-openvswitch-agent
    enable metadata-agent
fi

if "$NEUTRON_ENABLE_AGENT"; then
    enable config-setup
    enable plugin-openvswitch-agent
fi

##########################################################################
# Generate config variable shell snippet
##########################################################################

OPENSTACK_DATA="$ROOT/etc/openstack"
mkdir -p "$OPENSTACK_DATA"

python <<'EOF' >"$OPENSTACK_DATA/neutron.conf"
import os, sys, yaml

nova_configuration={
    'NEUTRON_SERVICE_USER': os.environ['NEUTRON_SERVICE_USER'],
    'NEUTRON_SERVICE_PASSWORD': os.environ['NEUTRON_SERVICE_PASSWORD'],
    'NEUTRON_DB_USER': os.environ['NEUTRON_DB_USER'],
    'NEUTRON_DB_PASSWORD': os.environ['NEUTRON_DB_PASSWORD'],
    'METADATA_PROXY_SHARED_SECRET': os.environ['METADATA_PROXY_SHARED_SECRET'],
    'NOVA_SERVICE_USER': os.environ['NOVA_SERVICE_USER'],
    'NOVA_SERVICE_PASSWORD': os.environ['NOVA_SERVICE_PASSWORD'],
    'RABBITMQ_HOST': os.environ['RABBITMQ_HOST'],
    'RABBITMQ_USER': os.environ['RABBITMQ_USER'],
    'RABBITMQ_PASSWORD': os.environ['RABBITMQ_PASSWORD'],
    'RABBITMQ_PORT': os.environ['RABBITMQ_PORT'],
    'CONTROLLER_HOST_ADDRESS': os.environ['CONTROLLER_HOST_ADDRESS'],
    'MANAGEMENT_INTERFACE_IP_ADDRESS': os.environ['MANAGEMENT_INTERFACE_IP_ADDRESS'],
    'KEYSTONE_TEMPORARY_ADMIN_TOKEN': os.environ['KEYSTONE_TEMPORARY_ADMIN_TOKEN'],
}

yaml.dump(nova_configuration, sys.stdout, default_flow_style=False)
EOF
